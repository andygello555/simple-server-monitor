extends layout

block content
  script.
    var logs, countUp, logTotal, logDropdown, dropdownButton, newModal

    //- dropClick passes the ID to the function so the url can be worked out
    const dropClick = (id) => {
      var url = `/log-viewer/${id.replace('dropdown-log-id-', '')}`
      window.location.replace(url);

      //- Remove is-active class from old menu item
      for (var i = 0; i < logDropdown.childNodes.length; i++) {
        if ((' ' + logDropdown.childNodes[i].className + ' ').indexOf(' is-active ') > -1) {
          logDropdown.childNodes[i].className = logDropdown.childNodes[i].className.replace(/\bis-active\b/g, "");
          break;
        }
      }

      //- ...and add it to new menu item
      var currentlyActive = document.getElementById(id)
      var name, arr
      name = "is-active";
      arr = currentlyActive.className.split(" ");
      if (arr.indexOf(name) == -1) {
        currentlyActive.className += " " + name;
      }
    }

    const setInputFilter = (textbox, inputFilter) => {
      ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function(event) {
        textbox.addEventListener(event, function() {
          if (inputFilter(this.value)) {
            this.oldValue = this.value;
            this.oldSelectionStart = this.selectionStart;
            this.oldSelectionEnd = this.selectionEnd;
          } else if (this.hasOwnProperty("oldValue")) {
            this.value = this.oldValue;
            this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
          } else {
            this.value = "";
          }
        });
      });
    }

    const updateLogDropdown = () => {
      axios.get('/logs').then(res => {
        if (res.status !== 'success') {
          //- Update logs
          //- Set up the menu item that are children of the container
          if (res.results !== logTotal) {
            //- Remove all the child nodes under dropdown menu
            while (logDropdown.firstChild) {
              logDropdown.removeChild(logDropdown.lastChild);
            }

            //- Then append back empty children to fit the number of logs returned
            for (var i=0; i<res.results; i++) {
              var a = document.createElement('a')

              a.setAttribute('id', `dropdown-log-id-${res.data.data.logs[i]._id}`)
              a.setAttribute('class', 'dropdown-item')
              a.setAttribute('onclick', 'dropClick(this.id)')
              a.appendChild(document.createTextNode(res.data.data.logs[i].name))

              logDropdown.appendChild(a)
            }
          }

          //- Update total
          logTotal = res.results
          countUp.update(logTotal)

          logs = res.data.data.logs
        }
      }).catch(error => {
        console.log(error)
      }).then(() => { return })
    }

    const modal = {
      //- Clears the input fields and removes helper text
      clear: function() {
        [newModalNumberIn, newModalPathIn, newModalNameIn].forEach(input => {
          input.value = ''
          this.deleteHelp(input.id)
        })
      },
      toggle: function() {
        newModal.classList.toggle('is-active')
        this.clear()
      },
      addHelp: function(id, text, c) {
        this.deleteHelp(id)
        var field = document.getElementById(`${id}-field`)
        var help = document.createElement('p')

        help.setAttribute('id', `${id}-help`)
        help.setAttribute('class', `help ${c}`)
        help.appendChild(document.createTextNode(text))

        field.appendChild(help)
      },
      deleteHelp: function(id) {
        var field = document.getElementById(`${id}-field`)
        var help = document.getElementById(`${id}-help`)

        if (help) {
          field.removeChild(help)
        }
      },
      validate: function() {
        [newModalNumberIn, newModalPathIn, newModalNameIn].forEach(input => {
          if (!input.value) {
            //- Activate helper
            this.addHelp(input.id, 'This field cannot be empty', 'is-danger')
            return false
          }

          if (input.id === 'new-log-number' && !isNaN(input.value)) {
            this.addHelp(input.id, 'Not a number', 'is-danger')
            return false
          }
        })
        return true
      },
      create: function() {
        if (!this.validate()) {
          return false
        }
        console.log('All good')
      }
    }

    addFunctionOnWindowLoad(() => {
      countUpOptions = {
        useEasing : true,
        useGrouping : true,
        separator : ',',
        decimal : '.',
        prefix : '',
        suffix : ''
      }

      logTotal = 0
      countUp = new countUp.CountUp('log-count', logTotal);
      countUp.start();

      //- Get all required elements
      logDropdown = document.getElementById('log-dropdown')
      dropdownButton = document.getElementById('selected-log')
      newModal = document.getElementById('new-log-modal')

      newModalNumberIn = document.getElementById("new-log-number")
      newModalPathIn = document.getElementById("new-log-path")
      newModalNameIn = document.getElementById("new-log-name")

      //- Set up input validators
      setInputFilter(newModalNumberIn, value => {
        return /^\d*$/.test(value)
      })
      setInputFilter(newModalPathIn, value => {
        return /^(\/[^\/ ]*)+\/?$/.test(value)
      })

      updateLogDropdown()
    })
  
  .modal#new-log-modal
    .modal-background
    .modal-card
      header.modal-card-head
        p.modal-card-title New log watcher
        button.delete(aria-label="close", onclick="modal.toggle()")
      section.modal-card-body
        .container.has-text-centered.my-5 Create a new log object that will persist everytime you revisit the monitor
        .field#new-log-name-field
          label.label Name
          .control
            input.input#new-log-name(type="text" placeholder="The name that will appear in the log dropdown")
        .field#new-log-path-field
          label.label Path
          .control
            input.input#new-log-path(type="text" placeholder="The path to the log file")
        .field#new-log-number-field
          label.label Number of lines
          .control
            input.input#new-log-number(type="text" placeholder="The last 'n' number of lines to output")
      footer.modal-card-foot
        button.button.is-success(onclick="modal.create()") Create
        button.button(onclick="modal.toggle()") Cancel

  nav.level
    .level-left
      .level-item
        p.subtitle.is-5 <strong id="log-count">0</strong> saved logs
      .level-item
        .dropdown
          .dropdown-trigger
            button.button(aria-haspopup="true" aria-controls="log-dropdown-menu")
              span#selected-log Select a log to view
          .dropdown-menu#log-dropdown-menu(role="menu")
            .dropdown-content#log-dropdown
    .level-right
      .level-item
        a.button.is-success(onclick="modal.toggle()") New
  
  block log
    .container
      section.hero
        .hero-body
          if !logTotal
            p.title No logs created!
            p.subtitle click on "New" to create one
          else
            p.title No log selected!
            p.subtitle select one from the dropdown or create a new one
