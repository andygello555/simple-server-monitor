extends layout

block content
  //- Add an external library because I can't be asked to write this myself
  script(src="/dist/bulma-toast.min.js")

  script.
    var logs, countUp, logTotal, logDropdown, dropdownButton, newModal

    const setInputFilter = (textbox, inputFilter) => {
      ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function(event) {
        textbox.addEventListener(event, function() {
          if (inputFilter(this.value)) {
            this.oldValue = this.value;
            this.oldSelectionStart = this.selectionStart;
            this.oldSelectionEnd = this.selectionEnd;
          } else if (this.hasOwnProperty("oldValue")) {
            this.value = this.oldValue;
            this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
          } else {
            this.value = "";
          }
        });
      });
    }

    const dropdown = {
      //- dropClick passes the ID to the function so the url can be worked out
      dropClick: function(id) {
        var actualId = id.replace('dropdown-log-id-', '')
        var url = `/log-viewer/${actualId}`
        window.location.replace(url);
      },
      updateLogDropdown: function() {
        axios.get('/logs').then(res => {
          if (res.status !== 'success') {
            //- Update logs
            //- Set up the menu item that are children of the container
            if (res.data.results !== logTotal) {
              //- Remove all the child nodes under dropdown menu
              while (logDropdown.firstChild) {
                logDropdown.removeChild(logDropdown.lastChild);
              }

              //- Then append back empty children to fit the number of logs returned
              res.data.data.logs.forEach(l => {
                var a = document.createElement('a')

                a.setAttribute('id', `dropdown-log-id-${l._id}`)
                a.setAttribute('class', 'dropdown-item')
                a.setAttribute('onclick', 'dropdown.dropClick(this.id)')
                a.appendChild(document.createTextNode(l.name))

                logDropdown.appendChild(a)
              })
            }

            //- Update total
            logTotal = res.data.results
            countUp.update(logTotal)
            if (logTotal === 1) {
              logCountSuffix.textContent = 'saved log'
            } else {
              logCountSuffix.textContent = 'saved logs'
            }

            logs = res.data.data.logs
          }
        }).catch(error => {
          console.log(error)
        }).then(() => { return })
      }
    }

    const newModalClass = {
      //- Clears the input fields and removes helper text
      clear: function() {
        [newModalNumberIn, newModalPathIn, newModalNameIn].forEach(input => {
          input.value = ''
          this.deleteHelp(input.id)
        })
      },
      toggle: function() {
        newModal.classList.toggle('is-active')
        this.clear()
      },
      addHelp: function(id, text, c) {
        this.deleteHelp(id)
        var field = document.getElementById(`${id}-field`)
        var help = document.createElement('p')

        help.setAttribute('id', `${id}-help`)
        help.setAttribute('class', `help ${c}`)
        help.appendChild(document.createTextNode(text))

        field.appendChild(help)
      },
      deleteHelp: function(id) {
        var field = document.getElementById(`${id}-field`)
        var help = document.getElementById(`${id}-help`)

        if (help) {
          field.removeChild(help)
        }
      },
      validate: function() {
        [newModalNumberIn, newModalPathIn, newModalNameIn].forEach(input => {
          if (!input.value) {
            //- Activate helper
            this.addHelp(input.id, 'This field cannot be empty', 'is-danger')
            return false
          }

          //- Check if number value can be parsed to int
          if (input.id === 'new-log-number' && isNaN(input.value)) {
            this.addHelp(input.id, 'Not a number', 'is-danger')
            return false
          }
        })
        return true
      },
      create: function() {
        var createButton = document.getElementById('new-log-create-button')
        createButton.classList.toggle('is-loading')

        if (this.validate()) {
          var toastType, cachedResData

          axios.post('/logs', {
            name: newModalNameIn.value,
            path: newModalPathIn.value,
            lines: parseInt(newModalNumberIn.value)
          }).then(res => {
            toastType = 'is-success'
            cachedResData = { ...res.data }
          }).catch(error => {
            if (error.response.data.errors.path) {
              cachedResData = { ...error.response.data.errors.path }
            } else {
              cachedResData = { ...error.response.data.errors }
            }
            toastType = 'is-danger'
          }).then(() => {
            bulmaToast.toast({ message: cachedResData.message, type: toastType })
            setTimeout(() => {
              createButton.classList.toggle('is-loading')
              if (cachedResData.log) {
                dropdown.dropClick(cachedResData.log._id)
              } else {
                this.toggle()
              }
            }, 1200)
          })
        }
      }
    }

    addFunctionOnWindowLoad(() => {
      countUpOptions = {
        useEasing : true,
        useGrouping : true,
        separator : ',',
        decimal : '.',
        prefix : '',
        suffix : ''
      }

      logTotal = 0
      countUp = new countUp.CountUp('log-count', logTotal);
      countUp.start();

      //- Get all required elements
      logCountSuffix = document.getElementById('log-count-suffix')
      logDropdownPrimary = document.getElementById('log-dropdown-primary')
      logDropdown = document.getElementById('log-dropdown')
      dropdownButton = document.getElementById('selected-log')
      newModal = document.getElementById('new-log-modal')
      selectedLog = document.getElementById('selected-log')
      logInfoSection = document.getElementById('log-info-section')

      //- Modal elements
      newModalNumberIn = document.getElementById("new-log-number")
      newModalPathIn = document.getElementById("new-log-path")
      newModalNameIn = document.getElementById("new-log-name")

      //- Set up input validators
      setInputFilter(newModalNumberIn, value => {
        return /^\d*$/.test(value)
      })
      setInputFilter(newModalPathIn, value => {
        return /^(\/[^\/ ]*)+\/?$/.test(value)
      })

      logDropdownPrimary.addEventListener('click', function(event) {
        event.stopPropagation();
        logDropdownPrimary.classList.toggle('is-active');
      });


      dropdown.updateLogDropdown()

      if (window.location.pathname.split('/').length === 2) {
        console.log('On viewer')
        selectedLog.textContent = 'Select a log to view'

        var infoTitle = document.createElement('p')
        var infoSubtitle = document.createElement('p')
        var infoTitleText, infoSubtitleText

        infoTitle.setAttribute('class', 'title')
        infoSubtitle.setAttribute('class', 'subtitle')

        if (logTotal) {
          infoTitleText = document.createTextNode('No logs created!')
          infoSubtitleText = document.createTextNode('click on "New" to create one')
        } else {
          infoTitleText = document.createTextNode('No log selected!')
          infoSubtitleText = document.createTextNode('select one from the dropdown or create a new one')
        }

        infoTitle.appendChild(infoTitleText)
        infoSubtitle.appendChild(infoSubtitleText)

        logInfoSection.appendChild(infoTitle)
        logInfoSection.appendChild(infoSubtitle)
      }
    })
  
  .modal#new-log-modal
    .modal-background
    .modal-card
      header.modal-card-head
        p.modal-card-title New log watcher
        button.delete(aria-label="close", onclick="newModalClass.toggle()")
      section.modal-card-body
        .container.has-text-centered.my-5 Create a new log object that will persist everytime you revisit the monitor
        .field#new-log-name-field
          label.label Name
          .control
            input.input#new-log-name(type="text" placeholder="The name that will appear in the log dropdown")
        .field#new-log-path-field
          label.label Path
          .control
            input.input#new-log-path(type="text" placeholder="The path to the log file")
        .field#new-log-number-field
          label.label Number of lines
          .control
            input.input#new-log-number(type="text" placeholder="The last 'n' number of lines to output")
      footer.modal-card-foot
        button.button.is-success#new-log-create-button(onclick="newModalClass.create()") Create
        button.button(onclick="newModalClass.toggle()") Cancel

  nav.level
    .level-left
      .level-item
        p.subtitle.is-5 <strong id="log-count">0</strong> <span id="log-count-suffix">saved logs</span>
      .level-item
        .dropdown#log-dropdown-primary(onlick="dropdown.toggle()")
          .dropdown-trigger
            button.button(aria-haspopup="true" aria-controls="log-dropdown-menu")
              span#selected-log
              span.icon.is-small
                i.fas.fa-angle-down(aria-hidden="true")
          .dropdown-menu#log-dropdown-menu(role="menu")
            .dropdown-content#log-dropdown
    .level-right
      .level-item
        a.button.is-success(onclick="newModalClass.toggle()") New
  
  block log
    .container
      section.hero
        .hero-body#log-info-section
